        var RX = PointATransformSystem.transformedX - PointBTransformSystem.transformedX;
        var RY = PointBTransformSystem.transformedY - PointCTransformSystem.transformedY;
        ctx.rect(PointATransformSystem.transformedX, PointATransformSystem.transformedY, RX, RY);

function draw(ctx) {
    var tmpVA, tmpVB, tmpVC;
    tmpVA = projection(this.VA);
    tmpVB = projection(this.VB);
    tmpVC = projection(this.VC);

    var vectorEnding;
    ctx.beginPath();
    ctx.fillStyle = this.color;
//        ctx.strokeStyle = "#FFFF00";
    ctx.moveTo(tmpVA.displayAX, tmpVA.displayAY);
    ctx.lineTo(tmpVA.displayBX, tmpVA.displayBY);

    if (tmpVA.displayBX == tmpVB.displayBX && tmpVA.displayBY == tmpVB.displayBY) {
        vectorEnding = "A";
        ctx.lineTo(tmpVB.displayAX, tmpVB.displayAY);
    } else {
        vectorEnding = "B";
        ctx.lineTo(tmpVB.displayBX, tmpVB.displayBY);
    }

    if (vectorEnding == "A" && tmpVB.displayAX == tmpVC.displayBX && tmpVB.displayAY == tmpVC.displayBY) {
        ctx.lineTo(tmpVC.displayAX, tmpVC.displayAY);
    } else if (vectorEnding == "B" && tmpVB.displayBX == tmpVC.displayBX && tmpVB.displayBY == tmpVC.displayBY) {
        ctx.lineTo(tmpVC.displayAX, tmpVC.displayAY);
    } else {
        ctx.lineTo(tmpVC.displayBX, tmpVC.displayBY);
    }

    ctx.lineTo(tmpVA.displayAX, tmpVA.displayAY);
    ctx.closePath();
    ctx.fill();
//        ctx.stroke();
}

//    var walls = [];
//    walls[0] = new Wall3D(vectors[0], vectors[1], vectors[2], vectors[3]);
//    walls[0].color = color;
//    walls[1] = new Wall3D(vectors[4], vectors[5], vectors[6], vectors[7]);
//    walls[1].color = color;
//    walls[2] = new Wall3D(vectors[8], vectors[7], vectors[11], vectors[3]);
//    walls[2].color = color;
//    walls[3] = new Wall3D(vectors[0], vectors[9], vectors[4], vectors[8]);
//    walls[3].color = color;
//    walls[4] = new Wall3D(vectors[1], vectors[10], vectors[5], vectors[9]);
//    walls[4].color = color;
//    walls[5] = new Wall3D(vectors[2], vectors[11], vectors[6], vectors[10]);
//    walls[5].color = color;


function projection(v) {
    if (v.A.z <= 0 && v.B.z <= 0) { //not true
        return {
            displayAX: undefined,
            displayAY: undefined,
            displayBX: undefined,
            displayBY: undefined
        }
    }
    var tmpAX, tmpAY, tmpBX, tmpBY, tmpA, tmpB;
    tmpAX = v.A.x * ZOOM_COEFFICIENT / (v.A.z);
    tmpAY = v.A.y * ZOOM_COEFFICIENT / (v.A.z);
    tmpBX = v.B.x * ZOOM_COEFFICIENT / (v.B.z);
    tmpBY = v.B.y * ZOOM_COEFFICIENT / (v.B.z);

    if (v.A.z <= 0) {
        tmpA = notVisible(v.B, v.A);
        tmpAX = tmpA.x * ZOOM_COEFFICIENT / (tmpA.z);
        tmpAY = tmpA.y * ZOOM_COEFFICIENT / (tmpA.z);
//        return {
//            displayAX: undefined,
//            displayAY: undefined,
//            displayBX: undefined,
//            displayBY: undefined
//        }
    }

    if (v.B.z <= 0) {
        tmpB = notVisible(v.A, v.B);
        tmpBX = tmpB.x * ZOOM_COEFFICIENT / (tmpB.z);
        tmpBY = tmpB.y * ZOOM_COEFFICIENT / (tmpB.z);
//        return {
//            displayAX: undefined,
//            displayAY: undefined,
//            displayBX: undefined,
//            displayBY: undefined
//        }
    }

    var PointATransformSystem = transformCoordinateSystem(tmpAX, tmpAY);
    var PointBTransformSystem = transformCoordinateSystem(tmpBX, tmpBY);

    return {
        displayAX: PointATransformSystem.transformedX,
        displayAY: PointATransformSystem.transformedY,
        displayBX: PointBTransformSystem.transformedX,
        displayBY: PointBTransformSystem.transformedY
    }
}

//function Vector3D(A, B) {
//    this.A = A;
//    this.B = B;
//    this.color = "#000000";
//
//    this.draw = draw;
//
//    function draw(ctx) {
//        if (this.A.z <= 0 && this.B.z <= 0) {
//            return;
//        }
//
//        var tmpAX, tmpAY, tmpBX, tmpBY, tmpA, tmpB;
//
//        tmpAX = this.A.x * ZOOM_COEFFICIENT / (this.A.z);
//        tmpAY = this.A.y * ZOOM_COEFFICIENT / (this.A.z);
//        tmpBX = this.B.x * ZOOM_COEFFICIENT / (this.B.z);
//        tmpBY = this.B.y * ZOOM_COEFFICIENT / (this.B.z);
//
//        if (this.A.z <= 0) {
//            tmpA = notVisible(this.B, this.A);
//            tmpAX = tmpA.x * ZOOM_COEFFICIENT / (tmpA.z);
//            tmpAY = tmpA.y * ZOOM_COEFFICIENT / (tmpA.z);
//        }
//
//        if (this.B.z <= 0) {
//            tmpB = notVisible(this.A, this.B);
//            tmpBX = tmpB.x * ZOOM_COEFFICIENT / (tmpB.z);
//            tmpBY = tmpB.y * ZOOM_COEFFICIENT / (tmpB.z);
//        }
//
//        var PointATransformSystem = transformCoordinateSystem(tmpAX, tmpAY);
//        var PointBTransformSystem = transformCoordinateSystem(tmpBX, tmpBY);
//
//        ctx.beginPath();
//        ctx.strokeStyle = this.color;
//        ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
//        ctx.lineTo(PointBTransformSystem.transformedX, PointBTransformSystem.transformedY);
//        ctx.closePath();
//        ctx.stroke();
//    }
//}

//    var vectors = [];
//    vectors[0] = new Vector3D(points[0], points[1]);
//    vectors[0].color = color;
//    vectors[1] = new Vector3D(points[1], points[2]);
//    vectors[1].color = color;
//    vectors[2] = new Vector3D(points[2], points[3]);
//    vectors[2].color = color;
//    vectors[3] = new Vector3D(points[3], points[0]);
//    vectors[3].color = color;
//
//    vectors[4] = new Vector3D(points[4], points[5]);
//    vectors[4].color = color;
//    vectors[5] = new Vector3D(points[5], points[6]);
//    vectors[5].color = color;
//    vectors[6] = new Vector3D(points[6], points[7]);
//    vectors[6].color = color;
//    vectors[7] = new Vector3D(points[7], points[4]);
//    vectors[7].color = color;
//
//    vectors[8] = new Vector3D(points[0], points[4]);
//    vectors[8].color = color;
//    vectors[9] = new Vector3D(points[1], points[5]);
//    vectors[9].color = color;
//    vectors[10] = new Vector3D(points[2], points[6]);
//    vectors[10].color = color;
//    vectors[11] = new Vector3D(points[3], points[7]);
//    vectors[11].color = color;

//    for (var i = 0; i < vectors.length; i++) {
//        var tmpVe = vectors[i];
//        tmpVe.draw(ctx);
//    }

function notVisible(vis, notvis) {
    var p = new Point3D();
    p.z = 0.01;
    p.x = 0;
    p.y = 0;
    var depth = Math.abs(vis.z) + Math.abs(notvis.z);
    var ratio = (vis.z + 1.0) / (depth);
    p.x = (vis.x + notvis.x) * ratio;
    p.y = (vis.y + notvis.y) * ratio;
    return p;
}

    var sum = 0;
    if (wall.PA.z <= 0) {
        sum += 0.01;
    } else {
        sum += wall.PA.z;
    }
    if (wall.PB.z <= 0) {
        sum += 0.01;
    } else {
        sum += wall.PB.z;
    }
    if (wall.PC.z <= 0) {
        sum += 0.01;
    } else {
        sum += wall.PC.z;
    }
    if (wall.PD.z <= 0) {
        sum += 0.01;
    } else {
        sum += wall.PD.z;
    }
    if(sum==0.04 || sum==0.03){
        sum = 1000;
    }

    function Wall3DParam() {
        this.ID;
        this.SC;
    }

    function scOfWall(wall) {
        var sum = 0;
        sum += wall.PA.z;
        sum += wall.PB.z;
        sum += wall.PC.z;
        sum += wall.PD.z;
    //    if (sum == 0.04 || sum == 0.03 || sum == 0.02) {
    //        sum = 1000;
    //    }
        return sum / 4;
    }

    function remakeWalls(walls) {
        var remaked = [];
        for (var i = 0; i < walls.length; i++) {
            remaked[i] = new Wall3DParam();
            remaked[i].SC = scOfWall(walls[i]);
            remaked[i].ID = i;
        }
        remaked.sort(function (a, b) {
            return b.SC - a.SC
        });
        var remakedAndSorted = [];
        for (var i = 0; i < walls.length; i++) {
            remakedAndSorted[i] = walls[remaked[i].ID];
        }
        return remakedAndSorted;
    }