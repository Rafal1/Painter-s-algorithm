var points1 = [];
//-40 + 30
points1[0] = new Point3D(-20, -20, 1.3);
points1[1] = new Point3D(-60, -20, 1.3);
points1[2] = new Point3D(-60, 10, 1.3);
points1[3] = new Point3D(-20, 10, 1.3);

points1[4] = new Point3D(-20, -20, 2);
points1[5] = new Point3D(-60, -20, 2);
points1[6] = new Point3D(-60, 10, 2);
points1[7] = new Point3D(-20, 10, 2);

var points2 = [];
//-30 + 70
points2[0] = new Point3D(-20, -20, 2.2);
points2[1] = new Point3D(-60, -20, 2.2);
points2[2] = new Point3D(-60, 50, 2.2);
points2[3] = new Point3D(-20, 50, 2.2);

points2[4] = new Point3D(-20, -20, 2.8);
points2[5] = new Point3D(-50, -20, 2.8);
points2[6] = new Point3D(-50, 50, 2.8);
points2[7] = new Point3D(-20, 50, 2.8);

var points3 = [];
//40 + 25
points3[0] = new Point3D(20, -20, 1.4);
points3[1] = new Point3D(60, -20, 1.4);
points3[2] = new Point3D(60, 5, 1.4);
points3[3] = new Point3D(20, 5, 1.4);

points3[4] = new Point3D(20, -20, 2.5);
points3[5] = new Point3D(60, -20, 2.5);
points3[6] = new Point3D(60, 5, 2.5);
points3[7] = new Point3D(20, 5, 2.5);

        var tmpAX, tmpAY, tmpBX, tmpBY, tmpA, tmpB;
        if (this.A.z < 0) {
            tmpA = notVisible(this.B, this.A);
            tmpAX = tmpA.x * CONSTANT_POSITION_D / (tmpA.z);
            tmpAY = tmpA.y * CONSTANT_POSITION_D / (tmpA.z); //todo imrove projection
            PointATransformSystem = transformCoordinateSystem(tmpAX, tmpAY);
            ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
            var afterProjection = this.projection();
            var PointBTransformSystem = transformCoordinateSystem(afterProjection[2], afterProjection[3]);
            ctx.lineTo(PointBTransformSystem.transformedX, PointBTransformSystem.transformedY);
            ctx.stroke();
        } else if (this.B.z < 0) {
            tmpB = notVisible(this.A, this.B);
            tmpBX = tmpB.x * CONSTANT_POSITION_D / (tmpB.z);
            tmpBY = tmpB.y * CONSTANT_POSITION_D / (tmpB.z);
            var afterProjection = this.projection();
            var PointATransformSystem = transformCoordinateSystem(afterProjection[0], afterProjection[1]);
            ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
            var PointBTransformSystem = transformCoordinateSystem(tmpBX, tmpBY);
            ctx.lineTo(tmpBX, tmpBY);
            ctx.stroke();
        } else {
            var afterProjection = this.projection();
            var PointATransformSystem = transformCoordinateSystem(afterProjection[0], afterProjection[1]);
            var PointBTransformSystem = transformCoordinateSystem(afterProjection[2], afterProjection[3]);
            ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
            ctx.lineTo(PointBTransformSystem.transformedX, PointBTransformSystem.transformedY);
            ctx.stroke();
        }
    }


        var tmpAX, tmpAY, tmpBX, tmpBY, tmpA, tmpB;
        if (this.A.z < 1) {
            tmpA = notVisible(this.B, this.A);
            tmpAX = tmpA.x * CONSTANT_POSITION_D / (tmpA.z);
            tmpAY = tmpA.y * CONSTANT_POSITION_D / (tmpA.z); //todo imrove projection
            PointATransformSystem = transformCoordinateSystem(tmpAX, tmpAY);
            ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
            var afterProjection = this.projection();
            var PointBTransformSystem = transformCoordinateSystem(afterProjection[2], afterProjection[3]);
            ctx.lineTo(PointBTransformSystem.transformedX, PointBTransformSystem.transformedY);
            ctx.stroke();
        } else if (this.B.z < 1) {
            tmpB = notVisible(this.A, this.B);
            tmpBX = tmpB.x * CONSTANT_POSITION_D / (tmpB.z);
            tmpBY = tmpB.y * CONSTANT_POSITION_D / (tmpB.z);
            var afterProjection = this.projection();
            var PointATransformSystem = transformCoordinateSystem(afterProjection[0], afterProjection[1]);
            ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
            var PointBTransformSystem = transformCoordinateSystem(tmpBX, tmpBY);
            ctx.lineTo(PointBTransformSystem.transformedX, PointBTransformSystem.transformedY);
            ctx.stroke();
        } else {
            var afterProjection = this.projection();
            var PointATransformSystem = transformCoordinateSystem(afterProjection[0], afterProjection[1]);
            var PointBTransformSystem = transformCoordinateSystem(afterProjection[2], afterProjection[3]);
            ctx.moveTo(PointATransformSystem.transformedX, PointATransformSystem.transformedY);
            ctx.lineTo(PointBTransformSystem.transformedX, PointBTransformSystem.transformedY);
            ctx.stroke();
        }
    }